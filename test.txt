void for_beef(char b) {

		ready = true;
		order_again = 'y';

		while (order_again == 'y' || order_again == 'Y') {

			do {
				cout << "Enter your order [1-5]: ";
				if (!(cin >> picking_order) || picking_order < 1 || picking_order > 5) {
					// Input is not a valid integer or not in the range [1, 5]
					cin.clear();  // Clear the error flag
					cin.ignore(numeric_limits<streamsize>::max(), '\n');  // Discard invalid input
					cout << "\n\t\t===============================================================" << endl;
					cout << "\t\t  Error message: Please enter a valid integer between 1 and 5." << endl;
					cout << "\t\t===============================================================\n" << endl;
				} else {
					// Valid input, break out of the loop
					break;
				}
			} while (true);

			cout << "\n" << beef_menu_init.at(picking_order - 1) << " is selected!\n\n";

			do {
				cout << "How many " << beef_menu_init.at(picking_order - 1) << ": ";
				if (!(cin >> _quantity) || _quantity < 1) {

					cin.clear();  // Clear the error flag
					cin.ignore(numeric_limits<streamsize>::max(), '\n');  // Discard invalid input

					cout << "\n\t\t===============================================================" << endl;
					cout << "\t\t  Error message: Please enter a valid integer & valid quantity." << endl;
					cout << "\t\t===============================================================\n" << endl;
				} else {
					// Valid input, break out of the loop
					break;
				}
			} while (true);

			cout << "\nOrder(s) made!\n\n";
			cout << "Order: " << beef_menu_init.at(picking_order - 1) << "\n";
			cout << "Quantity: " << _quantity << "\n\n";


			// ====================================== edit order ==========================================================
		start:
			char edit_or_not;
			do {
				cout << "Do you want to edit your order? [y/n]: ";
				if (!(cin >> edit_or_not) || (toupper(edit_or_not) != 'Y' && toupper(edit_or_not) != 'N')) {
					// Input is not a valid character or not 'y' or 'n'
					cin.clear();  // Clear the error flag
					cin.ignore(numeric_limits<streamsize>::max(), '\n');  // Discard invalid input
					cout << "\n\t\t=======================================================" << endl;
					cout << "\t\t\tInvalid input. Please enter 'y' or 'n'." << endl;
					cout << "\t\t=======================================================\n" << endl;
				} else {
					// Valid input, break out of the loop
					break;
				}
			} while (true);

			if (toupper(edit_or_not) == 'Y') {
				cout << "\n1. Edit.\n";
				cout << "2. Cancel edit.\n\n";

				int choice;

				do {
					cout << "Enter your choice: ";
					if (!(cin >> choice) || choice < 0 || choice > 2) {
						// Input is not a valid character or not 'y' or 'n'
						cin.clear();  // Clear the error flag
						cin.ignore(numeric_limits<streamsize>::max(), '\n');  // Discard invalid input
						cout << "\n\t\t===============================================================" << endl;
						cout << "\t\t  Error message: Please enter a valid integer between 1 and 2." << endl;
						cout << "\t\t===============================================================\n" << endl;
					} else {
						// Valid input, break out of the loop
						break;
					}
				} while (true);

				if (choice == 1) {
					cout << "\n1. " << "Order.\n";
					cout << "2. " << "Quantity.\n\n";

					int option;
					do {
						cout << "What do you edit: ";
						if (!(cin >> option) || option < 1 || option > 2) {
							// Input is not a valid character or not 'y' or 'n'
							cin.clear();  // Clear the error flag
							cin.ignore(numeric_limits<streamsize>::max(), '\n');  // Discard invalid input
							cout << "\n\t\t===============================================================" << endl;
							cout << "\t\t  Error message: Please enter a valid integer between 1 and 2." << endl;
							cout << "\t\t===============================================================\n" << endl;
						} else {
							// Valid input, break out of the loop
							break;
						}
					} while (true);

					if (option == 1) {

						show_beef_burgers_menu();
						show_chick_burgers_menu();
						// cout << "Order: " << beef_menu_init.at(picking_order - 1) << "\n"; 
						char pick_menu;
						cout << "Previous order is: " << beef_menu_init.at(picking_order - 1) << " and quantity is " << _quantity << "\n";

						do {
							// cout << "Press B for Beef Burger, Press C for Chicken Burger: ";
							cout << "\nB - Beef Burger\n";
							cout << "C - Chicken Burger\n";
							cout << "Q - Exit\n\n";
							cout << "Enter your choice: ";
							cin >> pick_menu;

							if (toupper(pick_menu) == 'Q') {
								exit(1);
							}

							// Clear the input buffer in case of invalid input
							cin.clear();
							cin.ignore(numeric_limits<streamsize>::max(), '\n');

							// Check if the input is valid
							if (toupper(pick_menu) == 'B' || toupper(pick_menu) == 'C') {
								break;  // Exit the loop if the input is valid
							} else {

								show_beef_burgers_menu();
								show_chick_burgers_menu();

								cout << "\n\t\t=======================================================" << endl;
								cout << "\t\t\tError message: Please enter B or C." << endl;
								cout << "\t\t=======================================================\n" << endl;
							}
						} while (true);
						// after validation
						if (toupper(pick_menu) == 'B') {
							do {
								show_beef_burgers_menu();
								cout << "Enter your order [1-5]: ";
								if (!(cin >> picking_order) || picking_order < 1 || picking_order > 5) {
									// Input is not a valid integer or not in the range [1, 5]
									cin.clear();  // Clear the error flag
									cin.ignore(numeric_limits<streamsize>::max(), '\n');  // Discard invalid input
									cout << "\n\t\t===============================================================" << endl;
									cout << "\t\t  Error message: Please enter a valid integer between 1 and 5." << endl;
									cout << "\t\t===============================================================\n" << endl;
								} else {
									// Valid input, break out of the loop
									break;
								}
							} while (true);

							cout << "\n" << beef_menu_init.at(picking_order - 1) << " is selected!\n\n";
							cout << "Order Edited\n";

							cout << "\nOrder(s) made!\n\n";
							cout << "Order: " << beef_menu_init.at(picking_order - 1) << "\n";
							cout << "Quantity: " << _quantity << "\n\n";

							goto start;
						}
					} else if (option == 2) {
						cout << "Previous quantity of " << beef_menu_init.at(picking_order - 1) << " is " << _quantity << "\n";

						do {
							cout << "Enter new quantity: ";
							if (!(cin >> _quantity) || _quantity < 1) {

								cin.clear();  // Clear the error flag
								cin.ignore(numeric_limits<streamsize>::max(), '\n');  // Discard invalid input

								cout << "\n\t\t===============================================================" << endl;
								cout << "\t\t  Error message: Please enter a valid integer & valid quantity." << endl;
								cout << "\t\t===============================================================\n" << endl;
							} else {
								// Valid input, break out of the loop
								break;
							}
						} while (true);

						cout << "\nOrder(s) made!\n\n";
						cout << "Order: " << beef_menu_init.at(picking_order - 1) << "\n";
						cout << "Quantity: " << _quantity << "\n\n";

						goto start;
					}
				} else if (choice == 2) {
					cout << "Cancelled.\n";
				}
			}
			// ====================================== end of edit order ==========================================================

			if (picking_order == 1) {

				foods.push_back("Beef Burger    ");
				quantity.push_back(_quantity);
				price.push_back(120);

			} else if (picking_order == 2) {

				foods.push_back("Cheese Burger  ");
				quantity.push_back(_quantity);
				price.push_back(130);

			} else if (picking_order == 3) {

				foods.push_back("Beef Bacon     ");
				quantity.push_back(_quantity);
				price.push_back(140);

			} else if (picking_order == 4) {

				foods.push_back("Creamy Mushroom");
				quantity.push_back(_quantity);
				price.push_back(100);

			} else if (picking_order == 5) {

				foods.push_back("Hawaiian Burger");
				quantity.push_back(_quantity);
				price.push_back(110);

			}

			do {
				cout << "Do you want to order again? [y/n]: ";
				if (!(cin >> order_again) || (order_again != 'y' && order_again != 'n')) {
					// Input is not a valid character or not 'y' or 'n'
					cin.clear();  // Clear the error flag
					cin.ignore(numeric_limits<streamsize>::max(), '\n');  // Discard invalid input
					cout << "\n\t\t=======================================================" << endl;
					cout << "\t\t\tInvalid input. Please enter 'y' or 'n'." << endl;
					cout << "\t\t=======================================================\n" << endl;
				} else {
					// Valid input, break out of the loop
					break;
				}
			} while (true);

			if (order_again == 'y' || order_again == 'Y') {

				// system("cls");
				show_beef_burgers_menu();

			} else {

				order_again = 'n';
				order_in_another_burger();
				display_order();
				c "\nOverall total: " << get_total() << "\n";
				get_total();
				age_comp();

			}

		}

	}